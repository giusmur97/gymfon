
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  hasActiveSessions: 'hasActiveSessions',
  nutritionalPreferences: 'nutritionalPreferences',
  addresses: 'addresses',
  bio: 'bio',
  avatar: 'avatar',
  certifications: 'certifications',
  specializations: 'specializations',
  hourlyRate: 'hourlyRate',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  sku: 'sku',
  inventory: 'inventory',
  images: 'images',
  category: 'category',
  nutritionInfo: 'nutritionInfo',
  variants: 'variants',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  shortDesc: 'shortDesc',
  longDesc: 'longDesc',
  priceOptions: 'priceOptions',
  inclusions: 'inclusions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  total: 'total',
  status: 'status',
  paymentId: 'paymentId',
  shippingAddress: 'shippingAddress',
  createdAt: 'createdAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  city: 'city',
  venue: 'venue',
  date: 'date',
  capacity: 'capacity',
  bookedCount: 'bookedCount'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  seat: 'seat',
  status: 'status',
  paymentId: 'paymentId'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ingredients: 'ingredients',
  instructions: 'instructions',
  calories: 'calories',
  macros: 'macros',
  servings: 'servings',
  prepTime: 'prepTime',
  cookTime: 'cookTime',
  tags: 'tags',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subject: 'subject',
  message: 'message',
  status: 'status',
  assignee: 'assignee'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  type: 'type',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  trainerId: 'trainerId',
  price: 'price',
  duration: 'duration',
  difficulty: 'difficulty',
  tags: 'tags',
  thumbnail: 'thumbnail',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseModuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  courseId: 'courseId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  moduleId: 'moduleId',
  content: 'content',
  duration: 'duration',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  progress: 'progress',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  trainerId: 'trainerId',
  clientId: 'clientId',
  duration: 'duration',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  workoutPlanId: 'workoutPlanId',
  restTime: 'restTime',
  notes: 'notes',
  scheduledDate: 'scheduledDate',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  workoutId: 'workoutId',
  sets: 'sets',
  reps: 'reps',
  weight: 'weight',
  duration: 'duration',
  restTime: 'restTime',
  videoUrl: 'videoUrl',
  instructions: 'instructions',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NutritionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  trainerId: 'trainerId',
  clientId: 'clientId',
  startDate: 'startDate',
  endDate: 'endDate',
  dailyCalories: 'dailyCalories',
  macros: 'macros',
  meals: 'meals',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingSessionScalarFieldEnum = {
  id: 'id',
  trainerId: 'trainerId',
  clientId: 'clientId',
  type: 'type',
  date: 'date',
  duration: 'duration',
  status: 'status',
  price: 'price',
  notes: 'notes',
  meetingLink: 'meetingLink',
  location: 'location',
  feedback: 'feedback',
  googleCalendarEventId: 'googleCalendarEventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  id: 'id',
  trainerId: 'trainerId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  interval: 'interval',
  features: 'features',
  maxClients: 'maxClients',
  maxCourses: 'maxCourses',
  stripePriceId: 'stripePriceId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientProgressScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  workoutStats: 'workoutStats',
  nutritionStats: 'nutritionStats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BodyMetricScalarFieldEnum = {
  id: 'id',
  clientProgressId: 'clientProgressId',
  date: 'date',
  weight: 'weight',
  bodyFat: 'bodyFat',
  muscleMass: 'muscleMass',
  measurements: 'measurements',
  createdAt: 'createdAt'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  clientProgressId: 'clientProgressId',
  title: 'title',
  description: 'description',
  targetValue: 'targetValue',
  currentValue: 'currentValue',
  unit: 'unit',
  targetDate: 'targetDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  birthDate: 'birthDate',
  birthPlace: 'birthPlace',
  phone: 'phone',
  address: 'address',
  profession: 'profession',
  generalNotes: 'generalNotes',
  cloudFolderId: 'cloudFolderId',
  cloudProvider: 'cloudProvider',
  sportsHistory: 'sportsHistory',
  physiologicalHistory: 'physiologicalHistory',
  pathologicalHistory: 'pathologicalHistory',
  nutritionDiary: 'nutritionDiary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BodyMeasurementScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  date: 'date',
  weight: 'weight',
  height: 'height',
  bodyFat: 'bodyFat',
  muscleMass: 'muscleMass',
  bodyWater: 'bodyWater',
  circumferences: 'circumferences',
  notes: 'notes',
  measuredBy: 'measuredBy',
  createdAt: 'createdAt'
};

exports.Prisma.ClientPhotoScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  type: 'type',
  cloudUrl: 'cloudUrl',
  downloadUrl: 'downloadUrl',
  thumbnailUrl: 'thumbnailUrl',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  cloudFileId: 'cloudFileId',
  cloudProvider: 'cloudProvider',
  uploadDate: 'uploadDate',
  notes: 'notes',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.ClientDocumentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  type: 'type',
  name: 'name',
  cloudUrl: 'cloudUrl',
  downloadUrl: 'downloadUrl',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  cloudFileId: 'cloudFileId',
  cloudProvider: 'cloudProvider',
  uploadDate: 'uploadDate',
  expiryDate: 'expiryDate',
  isValid: 'isValid',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.GDPRConsentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  type: 'type',
  isGranted: 'isGranted',
  grantedAt: 'grantedAt',
  revokedAt: 'revokedAt',
  method: 'method',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clientId: 'clientId',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  changes: 'changes'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  data: 'data',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  Service: 'Service',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Event: 'Event',
  Booking: 'Booking',
  Recipe: 'Recipe',
  Ticket: 'Ticket',
  Account: 'Account',
  Course: 'Course',
  CourseModule: 'CourseModule',
  Lesson: 'Lesson',
  Enrollment: 'Enrollment',
  WorkoutPlan: 'WorkoutPlan',
  Workout: 'Workout',
  Exercise: 'Exercise',
  NutritionPlan: 'NutritionPlan',
  TrainingSession: 'TrainingSession',
  Availability: 'Availability',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  ClientProgress: 'ClientProgress',
  BodyMetric: 'BodyMetric',
  Goal: 'Goal',
  ClientProfile: 'ClientProfile',
  BodyMeasurement: 'BodyMeasurement',
  ClientPhoto: 'ClientPhoto',
  ClientDocument: 'ClientDocument',
  GDPRConsent: 'GDPRConsent',
  AuditLog: 'AuditLog',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
